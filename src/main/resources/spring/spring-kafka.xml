<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
				        http://www.springframework.org/schema/beans 
				        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
				        http://www.springframework.org/schema/context 
				        http://www.springframework.org/schema/context/spring-context-4.0.xsd  
				        http://www.springframework.org/schema/jee 
				        http://www.springframework.org/schema/jee/spring-jee-4.0.xsd  
				        http://www.springframework.org/schema/tx 
				        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
				        http://www.springframework.org/schema/task
				        http://www.springframework.org/schema/task/spring-task-4.0.xsd"

	default-autowire="byName" default-lazy-init="false">
	<!-- 读取config.properties配置文件 -->
	<context:property-placeholder location="classpath:kafka.properties" />

	<!-- kafka消息提供者 client -->
	<bean id="producerClient" class="com.fdh.demo.kafka.Producer"
		scope="prototype" lazy-init="false" init-method="init">
		<property name="props">
			<props>
				<prop key="bootstrap.servers">${server.kafka.broker.list}</prop>
				<prop key="acks">all</prop>
				<prop key="retries">0</prop>
				<prop key="batch.size">16384</prop>
				<prop key="linger.ms">1</prop>
				<prop key="buffer.memory">33554432</prop>
				<prop key="key.serializer">org.apache.kafka.common.serialization.StringSerializer</prop>
				<prop key="value.serializer">org.apache.kafka.common.serialization.StringSerializer</prop>
				<!--<prop key="serializer.class">kafka.serializer.StringEncoder</prop>-->
				<!--<prop key="partitioner.class">com.fdh.demo.kafka.VinPartitioner</prop>-->
			</props>
		</property>
	</bean>

	<!-- kafka消息消费者 task -->
	<bean id="consumerTask"
		  class="com.fdh.demo.kafka.Consumer"  lazy-init="true" init-method="init">
		<!--<property name="topicStr">-->
			<!--<value>${server.topic.down}</value>-->
		<!--</property>-->
		<property name="props">
			<props>
				<prop key="bootstrap.servers">${kafka.consumer.bootstrap.servers}</prop>
				<!-- 此处定义group.id分布式部署需要不同,防止下行数据同一topic 分布式消费时,
				     其中有网关消费不到的情况(若下行数据topic各网关服务器配置为不同,则不存在此问题)
				-->
				<prop key="group.id">${kafka.consumer.group.id}</prop>
				<prop key="key.deserializer">org.apache.kafka.common.serialization.StringDeserializer
				</prop>
				<prop key="value.deserializer">org.apache.kafka.common.serialization.StringDeserializer
				</prop>
				<prop key="receive.buffer.bytes">1048576</prop>
				<prop key="session.timeout.ms">30000</prop>
				<prop key="auto.commit.interval.ms">1000</prop>
				<prop key="enable.auto.commit">true</prop>
			</props>
		</property>
	</bean>
</beans>
